<#
'     You can use this text template to customize object layer code generation for
'     applications that use the Entity Framework. The template generates code based on an .edmx file.
'     Before using this template, note the following:
'
'         *The name of the text template file will determine the name of the code file it generates.
'           For example, if the text template is named TextTemplate.tt, the generated file will be named
'           TextTemplate.vb or TextTemplate.cs.
'         *The Custom Tool property of the targeted .edmx file must be empty. For more information,
'          see .edmx File Properties (http://go.microsoft.com/fwlink/?LinkId=139299).
'         *The SourceCsdlPath initialization below must be set to one of the following:
'                  1) the path of the targeted .edmx or .csdl file
'                  2) the path of the targeted .edmx or .csdl file relative to the template path
'
'     For more detailed information about using this template, see
'     How to: Customize Object Layer Code Generation (http://go.microsoft.com/fwlink/?LinkId=139297).
'     For general information about text templates, see
'     Generating Artifacts by Using Text Templates (http://go.microsoft.com/fwlink/?LinkId=139298)
#>
<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#><#@
 output extension = ".vb" #><#

    Dim userSettings As UserSettings =
        New UserSettings With _
        { _
            .SourceCsdlPath = "TaskModel.edmx", _
            .ReferenceCsdlPaths = new string () {}, _
            .FullyQualifySystemTypes = True, _
            .CreateContextAddToMethods = True, _
            .CamelCaseFields = False _
        }

ApplyUserSettings(userSettings)
If Errors.HasErrors
    Return String.Empty
End If
Dim loader As New MetadataLoader(Me)
Dim ef As New MetadataTools(Me)
Dim region As New CodeRegion(Me)
Dim code As New CodeGenerationTools(Me) With {.FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, .CamelCaseFields = userSettings.CamelCaseFields}

ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray())
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath)
Dim namespaceName As String = code.VsNamespaceSuggestion()
UpdateObjectNamespaceMap(namespaceName)

#>

'------------------------------------------------------------------------------
' <auto-generated>
' <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
'
' <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
' <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Objects
Imports System.Data.Objects.DataClasses
Imports System.Data.EntityClient
Imports System.ComponentModel
Imports System.Xml.Serialization
Imports System.Runtime.Serialization

<Assembly: EdmSchemaAttribute("<#=Guid.NewGuid().ToString("D", CultureInfo.InvariantCulture)#>")>
<#
    ''''''''
    '''''''' Write Relationship Attributes.
    ''''''''
    region.Begin(GetResourceString("Template_RegionRelationships"))
    For Each association As AssociationType in GetSourceSchemaTypes(Of AssociationType)()
#>
<Assembly: EdmRelationshipAttribute("<#=association.NamespaceName#>", "<#=association.Name#>", "<#=EndName(association, 0)#>", <#=EndMultiplicity(association, 0, code)#>, GetType(<#=EscapeEndTypeName(association, 0, code)#>), "<#=EndName(association, 1)#>", <#=EndMultiplicity(association, 1, code)#>, GetType(<#=EscapeEndTypeName(association, 1, code)#>)<#=code.StringBefore(", ", If(association.IsForeignKey, "True", Nothing))#>)>
<#
    Next
    region.End()

    If(Not String.IsNullOrEmpty(namespaceName)) Then
#>
Namespace <#=namespaceName#>
<#
        PushIndent(CodeRegion.GetIndent(1))
    End If
#>

<#
    ''''''''
    ''''''''  Write EntityContainer and ObjectContext classes.
    ''''''''
    region.Begin(GetResourceString("Template_RegionContexts"))
    For Each container as EntityContainer in GetSourceSchemaTypes(Of EntityContainer)()
#>

Public Interface I<#=code.Escape(container)#>
<#
        region.Begin(GetResourceString("Template_RegionObjectSetProperties"))
        For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
            VerifyEntityTypeAndSetAccessibilityCompatability(entitySet)
#>

    ''' <summary>
    ''' <#=SummaryComment(entitySet)#>
    ''' </summary><#=LongDescriptionCommentElement(entitySet, region.CurrentIndentLevel)#>
    ReadOnly Property <#=code.Escape(entitySet)#>() As IObjectSet(Of <#=MultiSchemaEscape(entitySet.ElementType, code)#>)
<#
        Next
        region.End()
#>	

	Function SaveChanges() As Integer

End Interface

''' <summary>
''' <#=SummaryComment(container)#>
''' </summary><#=LongDescriptionCommentElement(container, region.CurrentIndentLevel)#>
<#=Accessibility.ForType(container)#> Partial Class <#=code.Escape(container)#>
    Inherits ObjectContext
	Implements I<#=code.Escape(container)#>

    #Region "Constructors"

    ''' <summary>
    ''' <#=String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextDefaultCtorComment"), container.Name, container.Name)#>
    ''' </summary>
    Public Sub New()
        MyBase.New("name=<#=container.Name#>", "<#=container.Name#>")
<#
        WriteLazyLoadingEnabled(container)
#>
        OnContextCreated()
    End Sub

    ''' <summary>
    ''' <#=String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)#>
    ''' </summary>
    Public Sub New(ByVal connectionString As String)
        MyBase.New(connectionString, "<#=container.Name#>")
<#
        WriteLazyLoadingEnabled(container)
#>
        OnContextCreated()
    End Sub

    ''' <summary>
    ''' <#=String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ContextCommonCtorComment"), container.Name)#>
    ''' </summary>
    Public Sub New(ByVal connection As EntityConnection)
        MyBase.New(connection, "<#=container.Name#>")
<#
        WriteLazyLoadingEnabled(container)
#>
        OnContextCreated()
    End Sub

    #End Region

    #Region "Partial Methods"

    Partial Private Sub OnContextCreated()
    End Sub

    #End Region

<#
        ''''''''
        ''''''''  Write EntityContainer and ObjectContext ObjectSet properties.
        ''''''''
        region.Begin(GetResourceString("Template_RegionObjectSetProperties"))
        For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
            VerifyEntityTypeAndSetAccessibilityCompatability(entitySet)
#>

    ''' <summary>
    ''' <#=SummaryComment(entitySet)#>
    ''' </summary><#=LongDescriptionCommentElement(entitySet, region.CurrentIndentLevel)#>
    <#=code.SpaceAfter(NewModifier(entitySet))#><#=Accessibility.ForReadOnlyProperty(entitySet)#> ReadOnly Property <#=code.Escape(entitySet)#>() As IObjectSet(Of <#=MultiSchemaEscape(entitySet.ElementType, code)#>) Implements I<#=code.Escape(container)#>.<#=code.Escape(entitySet)#>
        Get
            If (<#=code.FieldName(entitySet)#> Is Nothing) Then
                <#=code.FieldName(entitySet)#> = MyBase.CreateObjectSet(Of <#=MultiSchemaEscape(entitySet.ElementType, code)#>)("<#=entitySet.Name#>")
            End If
            Return <#=code.FieldName(entitySet)#>
        End Get
    End Property

    Private <#=code.FieldName(entitySet)#> As ObjectSet(Of <#=MultiSchemaEscape(entitySet.ElementType, code)#>)
<#
        Next
        region.End()

        ''''''''
        ''''''''  Write EntityContainer and ObjectContext AddTo<EntitySet> methods.
        ''''''''
        ''''''''  AddTo methods are no longer necessary since the EntitySet properties return
        ''''''''  an ObjectSet(Of T) object,  which has already has an Add method.
        ''''''''
        ''''''''  AddTo methods are generated here for backwards compatibility reasons only.
        ''''''''  Set the CreateContextAddToMethods property of the UserSettings object to false
        ''''''''  to turn off generation of the AddTo methods.
        ''''''''
        region.Begin(GetResourceString("Template_RegionAddToMethods"))
        Dim addToMethods As IEnumerable(Of EntitySet) = If(CreateContextAddToMethods.Value, container.BaseEntitySets.OfType(Of EntitySet)(), Enumerable.Empty(Of EntitySet)())
        For Each addTo As EntitySet in addToMethods
        Dim parameterName As String = code.Escape(FixParameterName(addTo.ElementType.Name, code))
#>

    ''' <summary>
    ''' <#=String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_GenCommentAddToMethodVb"), addTo.Name)#>
    ''' </summary>
    <#=Accessibility.ForType(addTo.ElementType)#> Sub AddTo<#=addTo.Name#>(ByVal <#=parameterName#> As <#=MultiSchemaEscape(addTo.ElementType, code)#>)
        MyBase.AddObject("<#=addTo.Name#>", <#=parameterName#>)
    End Sub
<#
        Next
        region.End()

        region.Begin(GetResourceString("Template_RegionFunctionImports"))
        For Each edmFunction As EdmFunction in container.FunctionImports
            Dim parameters As IEnumerable(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, code, ef)
            Dim paramList As String = String.Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
            Dim returnType As TypeUsage = If(edmFunction.ReturnParameter Is Nothing, Nothing, ef.GetElementType(edmFunction.ReturnParameter.TypeUsage))
#>

    ''' <summary>
    ''' <#=SummaryComment(edmFunction)#>
    ''' </summary><#=LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)#><#=ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)#>
    <#=code.SpaceAfter(NewModifier(edmFunction))#><#=Accessibility.ForMethod(edmFunction)#> Function <#=code.Escape(edmFunction)#>(<#=paramList#>) As <#=If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")#>
<#
            For Each parameter As FunctionImportParameter In parameters
                If (Not parameter.NeedsLocalVariable) Then
                    Continue For
                End If
#>
        Dim <#=parameter.LocalVariableName#> As ObjectParameter
        If (<#=If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")#>)
            <#=parameter.LocalVariableName#> = New ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>)
        Else
            <#=parameter.LocalVariableName#> = New ObjectParameter("<#=parameter.EsqlParameterName#>", GetType(<#=parameter.RawClrTypeName#>))
        End If

<#
            Next
#>
        Return MyBase.ExecuteFunction<#=If(returnType Is Nothing, "", "(Of " & MultiSchemaEscape(returnType, code) & ")")#>("<#=edmFunction.Name#>"<#=code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))#>)

    End Function
<#
            If (returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType)
#>
    ''' <summary>
    ''' <#=SummaryComment(edmFunction)#>
    ''' </summary><#=LongDescriptionCommentElement(edmFunction, region.CurrentIndentLevel)#>
    ''' <param name="mergeOption"></param><#=ParameterComments(parameters.Select(Function(p) New Tuple(Of string, string)(p.RawFunctionParameterName, SummaryComment(p.Source))), region.CurrentIndentLevel)#>
    <#=code.SpaceAfter(NewModifier(edmFunction))#><#=Accessibility.ForMethod(edmFunction)#> Function <#=code.Escape(edmFunction)#>(<#=code.StringAfter(paramList, ", ")#>mergeOption As MergeOption) As <#=If(returnType IsNot Nothing, "ObjectResult(Of " & MultiSchemaEscape(returnType, code) & ")", "Integer")#>
<#
            For Each parameter As FunctionImportParameter In parameters
                If (Not parameter.NeedsLocalVariable) Then
                    Continue For
                End If
#>
        Dim <#=parameter.LocalVariableName#> As ObjectParameter
        If (<#=If(parameter.IsNullableOfT, parameter.FunctionParameterName + ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")#>)
            <#=parameter.LocalVariableName#> = New ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>)
        Else
            <#=parameter.LocalVariableName#> = New ObjectParameter("<#=parameter.EsqlParameterName#>", GetType(<#=parameter.RawClrTypeName#>))
        End If

<#
                Next
#>
        Return MyBase.ExecuteFunction(Of <#=MultiSchemaEscape(returnType, code)#>)("<#=edmFunction.Name#>", mergeOption<#=code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))#>)

    End Function
<#
            End If
        Next
        region.End()
#>
	Public Function DoSaveChanges() As Integer Implements I<#=code.Escape(container)#>.SaveChanges
		Return MyBase.SaveChanges()
	End Function

End Class
<#
        VerifyCaseInsensitiveEntitySetUniqueness(container.BaseEntitySets.OfType(Of EntitySet)())
    Next
    region.End()

    ''''''''
    ''''''''  Write EntityType classes.
    ''''''''
    region.Begin(GetResourceString("Template_RegionEntities"))
    For Each loopEntity As EntityType in GetSourceSchemaTypes(Of EntityType)().OrderBy(Function(e) e.Name)
        Dim entity As EntityType = loopEntity
#>

''' <summary>
''' <#=SummaryComment(entity)#>
''' </summary><#=LongDescriptionCommentElement(entity, region.CurrentIndentLevel)#>
<EdmEntityTypeAttribute(NamespaceName:="<#=entity.NamespaceName#>", Name:="<#=entity.Name#>")>
<Serializable()>
<DataContractAttribute(IsReference:=True)>
<#
        For Each subType As EntityType in ItemCollection.GetItems(Of EntityType)().Where(Function(b) b.BaseType is entity)
#>
<KnownTypeAttribute(GetType(<#=MultiSchemaEscape(subType, code)#>))>
<#
        Next
#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.MustInheritOption(entity))#>Partial Class <#=code.Escape(entity)#>
    Inherits <#=BaseTypeName(entity, code)#>
<#
        If(Not entity.Abstract) Then
            WriteFactoryMethod(entity, code)
        End If

        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"))
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is PrimitiveType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WritePrimitiveTypeProperty(edmProperty, code)
        Next
        region.End()

        region.Begin(GetResourceString("Template_RegionComplexProperties"))
        For Each edmProperty As EdmProperty in entity.Properties.Where(Function(p) p.DeclaringType Is entity AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteComplexTypeProperty(edmProperty, code)
        Next
        region.End()

        ''''''''
        ''''''''  Write Navigation Properties.
        ''''''''
        region.Begin(GetResourceString("Template_RegionNavigationProperties"))
        For Each navProperty As NavigationProperty in entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)

#>

    ''' <summary>
    ''' <#=SummaryComment(navProperty)#>
    ''' </summary><#=LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)#>
    <XmlIgnoreAttribute()>
    <SoapIgnoreAttribute()>
    <DataMemberAttribute()>
    <EdmRelationshipNavigationPropertyAttribute("<#=navProperty.RelationshipType.NamespaceName#>", "<#=navProperty.RelationshipType.Name#>", "<#=navProperty.ToEndMember.Name#>")>
<#
            If(navProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many) Then
#>
     <#=code.SpaceAfter(NewModifier(navProperty))#><#=Accessibility.ForProperty(navProperty)#> Property <#=code.Escape(navProperty)#>() As EntityCollection(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)
        <#=code.SpaceAfter(Accessibility.ForGetter(navProperty))#>Get
            Return CType(Me,IEntityWithRelationships).RelationshipManager.GetRelatedCollection(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)("<#=navProperty.RelationshipType.FullName#>", "<#=navProperty.ToEndMember.Name#>")
        End Get
        <#=code.SpaceAfter(Accessibility.ForSetter(navProperty))#>Set
            If (Not value Is Nothing)
                CType(Me, IEntityWithRelationships).RelationshipManager.InitializeRelatedCollection(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)("<#=navProperty.RelationshipType.FullName#>", "<#=navProperty.ToEndMember.Name#>", value)
            End If
        End Set
    End Property
<#
           Else
#>
    <#=code.SpaceAfter(NewModifier(navProperty))#><#=Accessibility.ForProperty(navProperty)#> Property <#=code.Escape(navProperty)#>() As <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>
        <#=code.SpaceAfter(Accessibility.ForGetter(navProperty))#>Get
            Return CType(Me, IEntityWithRelationships).RelationshipManager.GetRelatedReference(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)("<#=navProperty.RelationshipType.FullName#>", "<#=navProperty.ToEndMember.Name#>").Value
        End Get
        <#=code.SpaceAfter(Accessibility.ForSetter(navProperty))#>Set
            CType(Me, IEntityWithRelationships).RelationshipManager.GetRelatedReference(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)("<#=navProperty.RelationshipType.FullName#>", "<#=navProperty.ToEndMember.Name#>").Value = value
        End Set
    End Property
<#
        Dim refPropertyName As String = navProperty.Name & "Reference"
        If(entity.Members.Any(Function(m) m.Name = refPropertyName)) Then
            ' 6017 is the same error number that EntityClassGenerator uses.
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6017",
                String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_ConflictingGeneratedNavPropName"), navProperty.Name, entity.FullName, refPropertyName)))
        End If
#>
    ''' <summary>
    ''' <#=SummaryComment(navProperty)#>
    ''' </summary><#=LongDescriptionCommentElement(navProperty, region.CurrentIndentLevel)#>
    <BrowsableAttribute(False)>
    <DataMemberAttribute()>
    <#=Accessibility.ForProperty(navProperty)#> Property <#=refPropertyName#>() As EntityReference(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)
        <#=code.SpaceAfter(Accessibility.ForGetter(navProperty))#>Get
            Return CType(Me, IEntityWithRelationships).RelationshipManager.GetRelatedReference(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)("<#=navProperty.RelationshipType.FullName#>", "<#=navProperty.ToEndMember.Name#>")
        End Get
        <#=code.SpaceAfter(Accessibility.ForSetter(navProperty))#>Set
            If (Not value Is Nothing)
                CType(Me, IEntityWithRelationships).RelationshipManager.InitializeRelatedReference(Of <#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>)("<#=navProperty.RelationshipType.FullName#>", "<#=navProperty.ToEndMember.Name#>", value)
            End If
        End Set
    End Property
<#
            End If
        Next
        region.End()
#>
End Class
<#
        VerifyCaseInsensitiveMemberUniqueness(GetAllDeclaredMembers(entity))
    Next
    region.End()

    ''''''''
    ''''''''  Write ComplexType classes.
    ''''''''
    region.Begin(GetResourceString("Template_RegionComplexTypes"))
    For Each  loopComplex As ComplexType in GetSourceSchemaTypes(Of ComplexType)().OrderBy(Function(e) e.Name)
        Dim complex As ComplexType = loopComplex
#>

''' <summary>
''' <#=SummaryComment(complex)#>
''' </summary><#=LongDescriptionCommentElement(complex, region.CurrentIndentLevel)#>
<EdmComplexTypeAttribute(NamespaceName:="<#=complex.NamespaceName#>", Name:="<#=complex.Name#>")>
<DataContractAttribute(IsReference:=True)>
<Serializable()>
<#=Accessibility.ForType(complex)#> Partial Class <#=code.Escape(complex)#>
    Inherits ComplexObject
<#
        WriteFactoryMethod(complex, code)

        region.Begin(GetResourceString("Template_RegionPrimitiveProperties"))
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is PrimitiveType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WritePrimitiveTypeProperty(edmProperty, code)
        Next
        region.End()

        region.Begin(GetResourceString("Template_RegionComplexProperties"))
        For Each edmProperty As EdmProperty in complex.Properties.Where(Function(p) p.DeclaringType Is complex AndAlso TypeOf p.TypeUsage.EdmType Is ComplexType)
            VerifyGetterAndSetterAccessibilityCompatability(edmProperty)
            WriteComplexTypeProperty(edmProperty, code)
        Next
        region.End()
#>
End Class
<#
        VerifyCaseInsensitiveMemberUniqueness(GetAllDeclaredMembers(complex))
    Next
    region.End()
#>

<#
    If (Not String.IsNullOrEmpty(namespaceName)) Then
    PopIndent()
#>
End Namespace
<#    
    End If
    VerifyCaseInsensitiveTypeUniqueness()
#>
<#+

    ''''''''
    ''''''''  Reusable Template Sections
    ''''''''

    ''''''''
    ''''''''  Write Factory Method.
    ''''''''

    Private Sub WriteFactoryMethod(structuralType As StructuralType, code As CodeGenerationTools)
        Dim region As CodeRegion = new CodeRegion(Me, 1)

        Dim methodName As String = "Create" + structuralType.Name
        Dim uniqueIdentifier As UniqueIdentifierService = new UniqueIdentifierService()
        Dim instanceName As String = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))))
        Dim parameters As IEnumerable(Of FactoryMethodParameter) = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType(Of EdmProperty)().Where(Function(p) IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, Function(t, c) MultiSchemaEscape(t, c), code)

        If (parameters.Count() = 0) Then
            Return
        End If

        If(structuralType.Members.Any(Function(m) m.Name = methodName)) Then
            '  6029 is the same error number that EntityClassGenerator uses for this conflict.
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
                String.Format(CultureInfo.CurrentCulture, _
                   GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)))
        End If

        region.Begin(GetResourceString("Template_RegionFactoryMethod"))
#>

    ''' <summary>
    ''' <#=String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_FactoryMethodComment"), structuralType.Name)#>
    ''' </summary><#=ParameterComments(parameters.Select(Function(p) New Tuple(Of String, String)(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)#>
    Public Shared Function <#=methodName#>(<#=String.Join(", ", parameters.Select(Function(p) p.ParameterName & " As " & p.ParameterType).ToArray())#>) As <#=code.Escape(structuralType)#>
        Dim <#=instanceName#> as <#=code.Escape(structuralType)#> = New <#=code.Escape(structuralType)#>
<#+

        For Each parameter As FactoryMethodParameter in parameters
            If(parameter.IsComplexType) Then
                '  ComplexType initialization
#>
        <#=instanceName#>.<#=code.Escape(parameter.Source)#> = StructuralObject.VerifyComplexObjectIsNotNull(<#=parameter.ParameterName#>, "<#=parameter.Source.Name#>")
<#+

            Else
                '  PrimitiveType initialization.
#>
        <#=instanceName#>.<#=code.Escape(parameter.Source)#> = <#=parameter.ParameterName#>
<#+
            End If
        Next
#>
        Return <#=instanceName#>
    End Function
<#+
        region.End()
    End Sub


    ''''''''
    ''''''''  Write PrimitiveType Properties.
    ''''''''
    Private Sub WritePrimitiveTypeProperty(primitiveProperty As EdmProperty, code As CodeGenerationTools)
        Dim ef As MetadataTools = New MetadataTools(Me)
#>

    ''' <summary>
    ''' <#=SummaryComment(primitiveProperty)#>
    ''' </summary><#=LongDescriptionCommentElement(primitiveProperty, 1)#>
    <EdmScalarPropertyAttribute(EntityKeyProperty:=<#=code.CreateLiteral(ef.IsKey(primitiveProperty))#>, IsNullable:=<#=code.CreateLiteral(ef.IsNullable(primitiveProperty))#>)>
    <DataMemberAttribute()>
    <#=code.SpaceAfter(NewModifier(primitiveProperty))#><#=Accessibility.ForProperty(primitiveProperty)#> Property <#=code.Escape(primitiveProperty)#>() As <#=code.Escape(primitiveProperty.TypeUsage)#>
        <#=code.SpaceAfter(Accessibility.ForGetter(primitiveProperty))#>Get
<#+             If(ef.ClrType(primitiveProperty.TypeUsage) = GetType(byte())) Then
#>
                Return StructuralObject.GetValidValue(<#=code.FieldName(primitiveProperty)#>)
<#+             Else
#>
            Return <#=code.FieldName(primitiveProperty)#>
<#+
                End If
#>
        End Get
        <#=code.SpaceAfter(Accessibility.ForSetter((primitiveProperty)))#>Set
<#+         If(ef.IsKey(primitiveProperty)) Then
                If(ef.ClrType(primitiveProperty.TypeUsage) = GetType(byte())) Then
#>
            If (Not StructuralObject.BinaryEquals(<#=code.FieldName(primitiveProperty)#>, Value)) Then
<#+
                Else
#>
            If (<#=code.FieldName(primitiveProperty)#> <> Value) Then
<#+
                End If
                PushIndent(CodeRegion.GetIndent(1))
            End If
#>
            <#=ChangingMethodName(primitiveProperty)#>(value)
            ReportPropertyChanging("<#=primitiveProperty.Name#>")
            <#=code.FieldName(primitiveProperty)#> = StructuralObject.SetValidValue(value<#=OptionalNullableParameterForSetValidValue(primitiveProperty, code)#>)
            ReportPropertyChanged("<#=primitiveProperty.Name#>")
            <#=ChangedMethodName(primitiveProperty)#>()
<#+         If(ef.IsKey(primitiveProperty)) Then
                PopIndent()
#>
            End If
<#+
            End If
#>
        End Set
    End Property

    Private <#=code.FieldName(primitiveProperty)#> As <#=code.Escape(primitiveProperty.TypeUsage)#><#=code.StringBefore(" = ", code.CreateLiteral(primitiveProperty.DefaultValue))#>
    Private Partial Sub <#=ChangingMethodName(primitiveProperty)#>(value As <#=code.Escape(primitiveProperty.TypeUsage)#>)
    End Sub

    Private Partial Sub <#=ChangedMethodName(primitiveProperty)#>()
    End Sub
<#+
    End Sub


    ''''''''
    ''''''''  Write ComplexType Properties.
    ''''''''
    Private Sub WriteComplexTypeProperty(complexProperty As EdmProperty, code As CodeGenerationTools)
#>

    ''' <summary>
    ''' <#=SummaryComment(complexProperty)#>
    ''' </summary><#=LongDescriptionCommentElement(complexProperty, 1)#>
    <EdmComplexPropertyAttribute()>
    <DesignerSerializationVisibility(DesignerSerializationVisibility.Content)>
    <XmlElement(IsNullable:=True)>
    <SoapElement(IsNullable:=True)>
    <DataMemberAttribute()>
    <#=code.SpaceAfter(NewModifier(complexProperty))#><#=Accessibility.ForProperty(complexProperty)#> Property <#=code.Escape(complexProperty)#>() As <#=MultiSchemaEscape(complexProperty.TypeUsage, code)#>
        <#=code.SpaceAfter(Accessibility.ForGetter(complexProperty))#>Get
            <#=code.FieldName(complexProperty)#> = GetValidValue(<#=code.FieldName(complexProperty)#>, "<#=complexProperty.Name#>", False, <#=InitializedTrackingField(complexProperty, code)#>)
            <#=InitializedTrackingField(complexProperty, code)#> = True
            Return <#=code.FieldName(complexProperty)#>
        End Get
        <#=code.SpaceAfter(Accessibility.ForSetter(complexProperty))#>Set
            <#=ChangingMethodName(complexProperty)#>(value)
            ReportPropertyChanging("<#=complexProperty.Name#>")
            <#=code.FieldName(complexProperty)#> = SetValidValue(<#=code.FieldName(complexProperty)#>, value, "<#=complexProperty.Name#>")
            <#=InitializedTrackingField(complexProperty, code)#> = True
            ReportPropertyChanged("<#=complexProperty.Name#>")
            <#=ChangedMethodName(complexProperty)#>()
        End Set
    End Property

    Private <#=code.FieldName(complexProperty)#> As <#=MultiSchemaEscape(complexProperty.TypeUsage, code)#>

    Private <#=InitializedTrackingField(complexProperty, code)#> As Boolean

    Private Partial Sub <#=ChangingMethodName(complexProperty)#>(value As <#=MultiSchemaEscape(complexProperty.TypeUsage, code)#>)
    End Sub

    Private Partial Sub <#=ChangedMethodName(complexProperty)#>()
    End Sub
<#+
    End Sub

    Private Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
        Dim lazyLoadingAttributeValue As String = Nothing
        Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
        If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
            Dim isLazyLoading As Boolean = False
            If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) Then
#>
        MyBase.ContextOptions.LazyLoadingEnabled = <#=isLazyLoading.ToString().ToLowerInvariant()#>
<#+
            End If
        End If
    End Sub

    ''''''''
    ''''''''  Declare Template Public Properties.
    ''''''''
    Public Property SourceCsdlPath() As String
    Public Property ModelNamespace() As String
    Public Property ItemCollection() As EdmItemCollection
    Public Property ReferenceCsdlPaths() As IEnumerable(Of String)
    Public Property FullyQualifySystemTypes() As Nullable(Of Boolean)
    Public Property CreateContextAddToMethods As Nullable(Of Boolean)
    Public Property EdmToObjectNamespaceMap() As Dictionary(Of string, string)
        Get
            Return _edmToObjectNamespaceMap
        End Get
        Set
            _edmToObjectNamespaceMap = Value
        End Set

    End Property
    Dim _edmToObjectNamespaceMap As Dictionary(Of string, string) = new Dictionary(Of string, string)

    Public ReadOnly Property SourceEdmVersion As Double
        Get
            If (Not ItemCollection Is Nothing) Then
                Return ItemCollection.EdmVersion
            End If
            Return 0.0
        End Get
    End Property

    ''''''''
    ''''''''  Declare Template Private Properties.
    ''''''''
    Private Shared ReadOnly Property ResourceManager As System.Resources.ResourceManager
        Get
            If(_resourceManager Is Nothing)
                    Dim manager As System.Resources.ResourceManager = New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly)
                    System.Threading.Interlocked.CompareExchange(_resourceManager, manager, Nothing)
            End If
            Return _resourceManager
        End Get
    End Property
    Dim Shared _resourceManager As System.Resources.ResourceManager

#>
<#+

    Private Shared Function GetResourceString(resourceName As String) As String
        Return ResourceManager.GetString(resourceName, _
             Nothing) '  Take default culture.
    End Function

    Private Sub ApplyUserSettings(userSettings as UserSettings)
        If(SourceCsdlPath Is Nothing) Then
#If NOT PREPROCESSED_TEMPLATE
            If userSettings.SourceCsdlPath = ("$" & "edmxInputFile" & "$")
                Errors.Add(New System.CodeDom.Compiler.CompilerError(Host.TemplateFile, 0, 0, String.Empty,
                    GetResourceString("Template_ReplaceVsItemTemplateToken")))
                Return
            End If

            SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath)
#Else
            SourceCsdlPath = userSettings.SourceCsdlPath
#End If
        End If

        ' normalize the path, remove ..\ from it
        SourceCsdlPath = Path.GetFullPath(SourceCsdlPath)

        If(ReferenceCsdlPaths Is Nothing) Then
            ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths
        End If

        If(Not FullyQualifySystemTypes.HasValue) Then
            FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes
        End If

        If(Not CreateContextAddToMethods.HasValue) Then
            CreateContextAddToMethods = userSettings.CreateContextAddToMethods
        End If

        DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation")
    End Sub


    ''''''''
    ''''''''  UserSettings Class
    ''''''''
    Private Class UserSettings
        Public Property SourceCsdlPath() As String
        Public Property ReferenceCsdlPaths() As String ()
        Public Property FullyQualifySystemTypes() As Boolean
        Public Property CreateContextAddToMethods() As Boolean
        Public Property CamelCaseFields() As Boolean
    End Class

Private Function MultiSchemaEscape(ByVal usage As TypeUsage, ByVal code As CodeGenerationTools) As String
    Dim structural As StructuralType = TryCast(usage.EdmType, StructuralType)
    If structural IsNot Nothing Then
        Return MultiSchemaEscape(structural, code)
    End If
    Return code.Escape(usage)
End Function

Private Function MultiSchemaEscape(ByVal type As StructuralType, ByVal code As CodeGenerationTools) As String
    If type.NamespaceName <> ModelNamespace Then
        Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type))
    End If

    Return code.Escape(type)
End Function

Private Function NewModifier(ByVal navigationProperty As NavigationProperty) As String
    Dim baseType As Type = GetType(EntityObject)
    Return NewModifier(baseType, navigationProperty.Name)
End Function

Private Function NewModifier(ByVal edmFunction As EdmFunction) As String
    Dim baseType As Type = GetType(ObjectContext)
    Return NewModifier(baseType, edmFunction.Name)
End Function

Private Function NewModifier(ByVal entitySet As EntitySet) As String
    Dim baseType As Type = GetType(ObjectContext)
    Return NewModifier(baseType, entitySet.Name)
End Function

Private Function NewModifier(ByVal edmProperty As EdmProperty) As String
    Dim baseType As Type
    If edmProperty.DeclaringType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        baseType = GetType(EntityObject)
    Else
        baseType = GetType(ComplexObject)
    End If
    Return NewModifier(baseType, edmProperty.Name)
End Function

Private Function NewModifier(ByVal type As Type, ByVal memberName As String) As String
    If HasBaseMemberWithMatchingName(type, memberName) Then
        Return "Shadows"
    End If
    Return String.Empty
End Function

Private Function ChangingMethodName(ByVal member As EdmMember) As String
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name)
End Function

Private Function ChangedMethodName(ByVal member As EdmMember) As String
    Return String.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name)
End Function

Private Function InitializedTrackingField(ByVal edmProperty As EdmProperty, ByVal code As CodeGenerationTools) As String
    Dim namePart As String = edmProperty.Name & "Initialized"
    If code.CamelCaseFields Then
        namePart = code.CamelCase(namePart)
    End If
    Return "_" & namePart
End Function

Private Function OptionalNullableParameterForSetValidValue(ByVal member As EdmMember, ByVal code As CodeGenerationTools) As String
    Dim ef As New MetadataTools(Me)
    Dim list As String = String.Empty
    If DirectCast(member.TypeUsage.EdmType, PrimitiveType).ClrEquivalentType.IsClass Then
        Dim storeGeneratedPatternProperty As MetadataProperty = Nothing
        Dim isNullable As Boolean = ef.IsNullable(member.TypeUsage) OrElse
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 & ":StoreGeneratedPattern", False, storeGeneratedPatternProperty) AndAlso
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"))
        list += ", " & code.CreateLiteral(isNullable)
    End If
    Return list
End Function

Private Shared Function IsVisibleMember(ByVal memberInfo As MemberInfo) As Boolean
    If TypeOf memberInfo Is EventInfo Then
        Dim ei As EventInfo = DirectCast(memberInfo, EventInfo)
        Dim add As MethodInfo = ei.GetAddMethod()
        Dim remove As MethodInfo = ei.GetRemoveMethod()
        Return IsVisibleMethod(add) OrElse IsVisibleMethod(remove)
    ElseIf TypeOf memberInfo Is FieldInfo Then
        Dim fi As FieldInfo = DirectCast(memberInfo, FieldInfo)
        Return Not fi.IsPrivate AndAlso Not fi.IsAssembly
    ElseIf TypeOf memberInfo Is MethodBase Then
        Dim mb As MethodBase = DirectCast(memberInfo, MethodBase)
        If mb.IsSpecialName Then
            Return False
        End If
        Return IsVisibleMethod(mb)
    ElseIf TypeOf memberInfo Is PropertyInfo Then
        Dim pi As PropertyInfo = DirectCast(memberInfo, PropertyInfo)
        Dim getMethod As MethodInfo = pi.GetGetMethod()
        Dim entitySet As MethodInfo = pi.GetSetMethod()
        Return IsVisibleMethod(getMethod) OrElse IsVisibleMethod(entitySet)
    End If

    Return False
End Function

Private Shared Function IsVisibleMethod(ByVal methodBase As MethodBase) As Boolean
    If methodBase Is Nothing Then
        Return False
    End If

    Return Not methodBase.IsPrivate AndAlso Not methodBase.IsAssembly
End Function

Private Shared Function HasBaseMemberWithMatchingName(ByVal type As Type, ByVal memberName As String) As Boolean
    Dim bindings As BindingFlags = BindingFlags.FlattenHierarchy Or BindingFlags.NonPublic Or BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.Static
    Return type.GetMembers(bindings).Where(Function(m) IsVisibleMember(m)).Any(Function(m) m.Name.Equals(memberName, StringComparison.OrdinalIgnoreCase))
End Function

Private Function GetSourceSchemaTypes(Of T As GlobalItem)() As IEnumerable(Of T)
    If Path.GetExtension(SourceCsdlPath) <> ".edmx" Then
        Return ItemCollection.GetItems(Of T)().Where(Function(e) e.MetadataProperties.Any(Function(mp) mp.Name = "SchemaSource" AndAlso DirectCast(mp.Value, String) = SourceCsdlPath))
    Else
        Return ItemCollection.GetItems(Of T)()
    End If
End Function

Private Function EndName(ByVal association As AssociationType, ByVal index As Integer) As String
    Return association.AssociationEndMembers(index).Name
End Function

Private Function EndMultiplicity(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
    Return code.CreateLiteral(association.AssociationEndMembers(index).RelationshipMultiplicity)
End Function

Private Function EscapeEndTypeName(ByVal association As AssociationType, ByVal index As Integer, ByVal code As CodeGenerationTools) As String
    Dim entity As EntityType = association.AssociationEndMembers(index).GetEntityType()
    Return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity))
End Function

Private Function GetObjectNamespace(ByVal csdlNamespaceName As String) As String
    Dim objectNamespace As String = Nothing
    If EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, objectNamespace) Then
        Return objectNamespace
    End If

    Return csdlNamespaceName
End Function

Private Sub UpdateObjectNamespaceMap(objectNamespace As String)
	If Not objectNamespace = ModelNamespace AndAlso Not EdmToObjectNamespaceMap.ContainsKey(ModelNamespace)
		EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace)
	End If
End Sub


Private Shared Function FixParameterName(ByVal name As String, ByVal code As CodeGenerationTools) As String
    '  Change any property that is 'id' (case insensitive) to 'ID'
    '  since 'iD' is a violation of FxCop rules.
    If StringComparer.OrdinalIgnoreCase.Equals(name, "id") Then
        '  Return all lower case since it is an abbreviation, not an acronym.
        Return "id"
    End If
    Return code.CamelCase(name)
End Function

Private Function BaseTypeName(ByVal entity As EntityType, ByVal code As CodeGenerationTools) As String
    Return If(entity.BaseType Is Nothing, "EntityObject", MultiSchemaEscape(DirectCast(entity.BaseType, StructuralType), code))
End Function

Private Function IncludePropertyInFactoryMethod(ByVal factoryType As StructuralType, ByVal edmProperty As EdmProperty) As Boolean
    If edmProperty.Nullable Then
        Return False
    End If

    If edmProperty.DefaultValue IsNot Nothing Then
        Return False
    End If

    If (Accessibility.ForReadOnlyProperty(edmProperty) <> "Public" AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) <> "Public") OrElse (factoryType IsNot edmProperty.DeclaringType AndAlso Accessibility.ForWriteOnlyProperty(edmProperty) = "Private") Then
        '  There is no public part to the property.
        Return False
    End If

    Return True
End Function

Private Class FactoryMethodParameter
    Public Source As EdmProperty
    Public RawParameterName As String
    Public ParameterName As String
    Public ParameterType As String
    Public ParameterComment As String
    Public IsComplexType As Boolean

    Public Shared Function CreateParameters(ByVal properties As IEnumerable(Of EdmProperty), ByVal unique As UniqueIdentifierService, ByVal multiSchemaEscape As Func(Of TypeUsage, CodeGenerationTools, String), ByVal code As CodeGenerationTools) As IEnumerable(Of FactoryMethodParameter)
        Dim parameters As New List(Of FactoryMethodParameter)()
        For Each edmProperty As EdmProperty In properties
            Dim parameter As New FactoryMethodParameter()
            parameter.Source = edmProperty
            parameter.IsComplexType = TypeOf edmProperty.TypeUsage.EdmType Is ComplexType
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(edmProperty.Name, code))
            parameter.ParameterName = code.Escape(parameter.RawParameterName)
            parameter.ParameterType = multiSchemaEscape(edmProperty.TypeUsage, code)
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), edmProperty.Name)
            parameters.Add(parameter)
        Next

        Return parameters
    End Function
End Class

Private Property DefaultSummaryComment() As String

Private Function SummaryComment(ByVal item As MetadataItem) As String
    If item.Documentation IsNot Nothing AndAlso item.Documentation.Summary IsNot Nothing Then
        Return PrefixLinesOfMultilineComment(XMLCOMMENT_START & " ", XmlEntityize(item.Documentation.Summary))
    End If

    If DefaultSummaryComment IsNot Nothing Then
        Return DefaultSummaryComment
    End If

    Return String.Empty
End Function

Private Function LongDescriptionCommentElement(ByVal item As MetadataItem, ByVal indentLevel As Integer) As String
    If item.Documentation IsNot Nothing AndAlso Not String.IsNullOrEmpty(item.Documentation.LongDescription) Then
        Dim comment As String = Environment.NewLine
        Dim lineStart As String = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START & " "
        comment += (lineStart & "<LongDescription>") + Environment.NewLine
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine
        comment += lineStart & "</LongDescription>"
        Return comment
    End If
    Return String.Empty
End Function

Private Function PrefixLinesOfMultilineComment(ByVal prefix As String, ByVal comment As String) As String
    Return comment.Replace(Environment.NewLine, Environment.NewLine + prefix)
End Function

Private Function ParameterComments(ByVal parameters As IEnumerable(Of Tuple(Of String, String)), ByVal indentLevel As Integer) As String
    Dim builder As New System.Text.StringBuilder()
    For Each parameter As Tuple(Of String, String) In parameters
        builder.AppendLine()
        builder.Append(CodeRegion.GetIndent(indentLevel))
        builder.Append(XMLCOMMENT_START)
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=""{0}"">{1}</param>", parameter.Item1, parameter.Item2))
    Next
    Return builder.ToString()
End Function

Private Function XmlEntityize(ByVal text As String) As String
    If String.IsNullOrEmpty(text) Then
        Return String.Empty
    End If

    text = text.Replace("&", "&amp;")
    text = text.Replace("<", "&lt;").Replace(">", "&gt;")
    Dim id As String = Guid.NewGuid().ToString()
    text = text.Replace(Environment.NewLine, id)
    text = text.Replace(vbCr, "&#xD;").Replace(vbLf, "&#xA;")
    text = text.Replace(id, Environment.NewLine)
    Return text.Replace("'", "&apos;").Replace("""", "&quot;")
End Function

Const XMLCOMMENT_START As String = "'''"
Private Function GetProperties(ByVal type As StructuralType) As IEnumerable(Of EdmProperty)
    If type.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
        Return DirectCast(type, EntityType).Properties
    Else
        Return DirectCast(type, ComplexType).Properties
    End If
End Function

    ''''''''
    ''''''''  Uniqueness Verification Methods
    ''''''''
Private Function GetGlobalItemName(item As GlobalItem) As String
    If TypeOf item Is EdmType Then
        '  EntityType or ComplexType.
        Return CType(item, EdmType).Name
    Else
        '  Must be an EntityContainer.
        Return CType(item, EntityContainer).Name
    End If
End Function

Protected Sub VerifyGetterAndSetterAccessibilityCompatability(ByVal member As EdmMember)
    Dim rawGetterAccessibility As String = Accessibility.ForReadOnlyProperty(member)
    Dim rawSetterAccessibility As String = Accessibility.ForWriteOnlyProperty(member)

    If (rawGetterAccessibility = "Friend" AndAlso rawSetterAccessibility = "Protected") OrElse (rawGetterAccessibility = "Protected" AndAlso rawSetterAccessibility = "Friend") Then

        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture, GetResourceString("GeneratedPropertyAccessibilityConflict"), member.Name, rawGetterAccessibility, rawSetterAccessibility)))
    End If
End Sub

Private Sub VerifyEntityTypeAndSetAccessibilityCompatability(ByVal entitySet As EntitySet)
    Dim typeAccess As String = Accessibility.ForType(entitySet.ElementType)
    Dim setAccess As String = Accessibility.ForReadOnlyProperty(entitySet)

    If typeAccess = "Friend" AndAlso (setAccess = "Public" OrElse setAccess = "Protected") Then
        Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture, GetResourceString("EntityTypeAndSetAccessibilityConflict"), entitySet.ElementType.Name, typeAccess, entitySet.Name, setAccess)))
    End If
End Sub


Private Sub VerifyCaseInsensitiveTypeUniqueness()
    VerifyCaseInsensitiveUniqueness(GetSourceSchemaTypes(Of GlobalItem)().Where(Function(i) TypeOf i is StructuralType Or TypeOf i is EntityContainer), _
        Function(g) GetGlobalItemName(g), _
        Function(g) String.Format(CultureInfo.CurrentCulture, _
            GetResourceString("Template_CaseInsensitiveTypeConflict"), GetGlobalItemName(g)))
End Sub

Private Sub VerifyCaseInsensitiveEntitySetUniqueness(entitySets As IEnumerable(Of EntitySet))
    VerifyCaseInsensitiveUniqueness(entitySets, Function(e) e.Name, _
        Function(e) String.Format(CultureInfo.CurrentCulture, _
            GetResourceString("Template_CaseInsensitiveEntitySetConflict"), e.EntityContainer.Name, e.Name))
End Sub

Private Sub VerifyCaseInsensitiveMemberUniqueness(members As IEnumerable(Of EdmMember))
    VerifyCaseInsensitiveUniqueness(members, Function(m) m.Name, _
        Function(m) String.Format(CultureInfo.CurrentCulture, _
            GetResourceString("Template_CaseInsensitiveMemberConflict"), m.DeclaringType.FullName, m.Name))
End Sub

Private Sub VerifyCaseInsensitiveUniqueness(Of T As MetadataItem)(items As IEnumerable(Of T), getIdentity As Func(Of T, String), formatMessage As Func(Of T, String) )
    Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
    For Each item As MetadataItem in items
        If Not hash.Add(getIdentity(item)) Then
            '  6023 is the error number used by System.Data.Entity.Design EntityClassGenerator.
            Errors.Add(New System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, 6023, formatMessage(item)))
        End If
    Next
End Sub

Public Function GetAllDeclaredMembers(structural As StructuralType) As IEnumerable(Of EdmMember)
    If(TypeOf structural Is EntityType) Then
        Dim entity As EntityType = CType(structural, EntityType)
        Dim declaredMembers As IEnumerable(Of EdmMember) = entity.Members.Where(Function(m) m.DeclaringType Is entity)
        Dim decalredNavigationProperties As IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(n) n.DeclaringType Is entity)

        Return declaredMembers.Union(decalredNavigationProperties.Cast(Of EdmMember)())
    End If

    Return structural.Members.Where(Function(m) m.DeclaringType Is structural)
End Function

Private NotInheritable Class UniqueIdentifierService
    Private ReadOnly _knownIdentifiers As HashSet(Of String) = New HashSet(Of string)(StringComparer.OrdinalIgnoreCase)

    ''' <summary>
    '''  Makes the supplied identifier  unique within the scope by adding
    '''  a suffix (1, 2, 3, ...), and returns the unique identifier.
    ''' </summary>
    Public Function AdjustIdentifier(identifier As String) As String
        '  find a unique name by adding suffix as necessary
        Dim numberOfConflicts As Int32 = 0
        Dim adjustedIdentifier As String = identifier
        While Not _knownIdentifiers.Add(adjustedIdentifier)
            numberOfConflicts += 1
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture)
        End While

        Return adjustedIdentifier
    End Function
End Class
#>
